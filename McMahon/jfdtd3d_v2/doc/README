===============================================================================
===============================================================================

   NAME: JFDTD2D/3D: A parallel 3D Finite-Difference Time-Domain (FDTD) code and
a 2D serial FDTD code.

   Copyright (c) 2006 - 2008 Jeffrey M. McMahon

   VERSION: 2.00

   DATE: 09/29/2008

   DESCRIPTON: Solves Maxwell's equations in differential form using FDTD.

===============================================================================
===============================================================================

Copyright (c)  2006 - 2008  Jeffrey M. McMahon.
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


I. SYSTEM REQUIREMENTS
II. INSTALLING, COMPILING, AND RUNNING
III. KNOWN ISSUES


=========================================================
I. SYSTEM REQUIREMENTS 
=========================================================

- (3D) MPI library
- JScience library (version 1.1)
- c++ MPI compiler (mpic++, etc)


=========================================================
II. INSTALLATION, COMPILING, AND RUNNING
=========================================================

1) First untar the .tar file (jfdtd3d.tar or jfdtd2d.tar) using the following command:

tar -xvf jfdtd3d.tar (or jfdtd2d.tar)

2) Edit the subroutine read_parameters() in the main source code (jfdtd3d.cpp or jfdtd2d.cpp) to perform your desired simulation (see manual). 

3) Modify the Makefile for your particular system (compiler, linker, etc), and run the following commands:

make clean_results
make clean
make 

4) (3D) Run with the following command:

mpirun -np N jfdtd3d

where N is the number of processors. 

(2D) Run with the following command:

jfdtd2d


=========================================================
IV. KNOWN ISSUES
=========================================================

- (3D) Something is incorrect with the PML.  If periodic boundary conditions are turned off in the z-direction, the results come out screwy.  Leave this on (PML is still placed in z so there are not really* periodic BC in this direction).

- (2D) Something is incorrect with the PML.

- (2D) Something may be incorredt with the total-field / scattered-field implementation.
